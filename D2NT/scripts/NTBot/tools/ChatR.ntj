// ChatR Functions Start

var ChatRLog = "logs/ChatR/" + me.charname + ".txt";
var PiGN;
var OpenLine;
var TheTime = MyTime();
var Today = new Date().toLocaleFormat("%d %b");
var LogAll;
var MyTab;
var CurAcct = (!me.account) ? "Offline" : me.account;
var CurGame = (!me.gamename) ? "Single Player" : me.gamename;
var CurPass = (!me.gamepassword) ? "" : me.gamepassword;
var CurRealm = (me.realm == "USWest") ? "US West" : (me.realm == "USEast") ? "US East" : (me.realm == "Asia") ? "Asia" : (me.realm == "Europe") ? "Europe" : "Offline";
var TheTime = MyTime();
var TLoop = true;
var Today = new Date().toLocaleFormat("%d %b");

function NTMain()
{
	Include("libs/common/NTCommon.ntl");
	NTC_IncludeLibs();
	NTC_IncludeConfig("NTBot/char_configs");
	NT_LoadConfig();
	NTA_Initialize();

	RegisterEvent(EVENT_GAMEMSG, ChatReading);
	ScanPlayers();
	
	if(NTConfig_WhisperToTab == "common") { MyTab=NTC_LOG_COMMON; }
	else if(NTConfig_WhisperToTab == "item") { MyTab = NTC_LOG_ITEM; }
	else { return; }
	if(NTConfig_ChatRecording){
		LogAll = true;
		OpeningChatRLogs();
	}
	else{
		LogAll = false;
	}
	
	while(1){ Delay(100); MyTime(); }
}

function OpeningChatRLogs()
{
	MyTime();
	OpenLine = "----- " + CurGame + "/" + CurPass + " -----";
	var ChatLog = FileOpen(ChatRLog, 2);
		if(!ChatLog) { ChatLog = FileOpen(ChatRLog, 1); ChatLog.Close(); } 
		ChatLog.WriteLine("");
		ChatLog.WriteLine(OpenLine);
		ChatLog.WriteLine("Date/Time: " + Today + " - " + TheTime);
		ChatLog.WriteLine("Char/Level: " + me.charname + " / " + me.GetStat(12));
		ChatLog.WriteLine("Realm: " + CurRealm);
		ChatLog.WriteLine("Current Players: " + PiGN);
		ChatLog.WriteLine("");
		ChatLog.Close();
	Delay(Random(100,200));
	return;
}

function ChatReading(msg, type)
{
	switch(type){
		case 0:
			if(msg.indexOf(": ") != -1 && LogAll) {
				var Text = msg.split(": ")[1].replace(/ÿc(.)/g, "");
				var Char = msg.split(": ")[0].replace(/ÿc(.)/g, ""); Delay(Random(100,200));
				ChatLog = FileOpen(ChatRLog, 2);
					ChatLog.WriteLine(Char + ": " + Text);
				ChatLog.Close(); Delay(Random(100,200));
			}
			else if(msg.indexOf(" is no longer") != -1 && LogAll) {
				var NoHost = msg.split(" is no longer")[0].replace(/ÿc(.)/g, ""); Delay(Random(100,200));
				ChatLog = FileOpen(ChatRLog, 2);
					ChatLog.WriteLine(NoHost + " is no longer hostile towards you.");
				ChatLog.Close(); Delay(Random(100,200));
			}
			break;
		case 4:
			if(msg.indexOf(" joined ") != -1 && LogAll) {
				var Joiner = msg.split(" j")[0].replace(/ÿc(.)/g, ""); PiGN++
				ChatLog = FileOpen(ChatRLog, 2);
					ChatLog.WriteLine(Joiner + " joined our world. (" + PiGN + ")");
				ChatLog.Close(); Delay(Random(100,200));
			}
			else if(msg.indexOf(" left ") != -1 && LogAll) {
				var Leaver = msg.split(" l")[0].replace(/ÿc(.)/g, ""); PiGN--
				ChatLog = FileOpen(ChatRLog, 2);
					ChatLog.WriteLine(Leaver + " left the game! (" + PiGN + ")");
				ChatLog.Close(); Delay(Random(100,200));
			}
			else if(msg.indexOf(" dropped ") != -1 && LogAll) {
				var Dropped = msg.split(" d")[0].replace(/ÿc(.)/g, ""); PiGN--
				ChatLog = FileOpen(ChatRLog, 2);
					ChatLog.WriteLine(Dropped + " dropped due to timeout. (" + PiGN + ")");
				ChatLog.Close(); Delay(Random(100,200));
			}
			else if(msg.indexOf(" was slain by ") != -1 && LogAll) {
				var Winner = msg.split("n by ")[1].replace(/ÿc(.)/g, "");
				var Loser = msg.split(" was s")[0].replace(/ÿc(.)/g, "");
				ChatLog = FileOpen(ChatRLog, 2);
				ChatLog.WriteLine(Winner + " was slain by " + Loser);
				ChatLog.Close(); Delay(Random(100,200));
			}
			else if(msg.indexOf(GetLocaleString(11005)) != -1 && LogAll) {
				var CDString = msg.replace(/ÿc(.)/g, "");
				ChatLog = FileOpen(ChatRLog, 2);
					ChatLog.WriteLine(CDString);
				ChatLog.Close(); Delay(Random(100,200));
			}
			else if(msg.indexOf(GetLocaleString(11004).substr(3)) != -1 && LogAll) {
				var SoJString = msg.replace(/ÿc(.)/g, "");
				ChatLog = FileOpen(ChatRLog, 2);
					ChatLog.WriteLine(SoJString);
				ChatLog.Close(); Delay(Random(100,200));
			}
			break;
		case 2:
			if(msg.indexOf(" whispers:") != -1) {
				var WhispFrom = msg.split(" whispers:")[0].replace(/ÿc(.)/g, "");
				var FromMsg = msg.split(" whispers: ")[1].replace(/ÿc(.)/g, "");
				if(LogAll){
					ChatLog = FileOpen(ChatRLog, 2);
						ChatLog.WriteLine(WhispFrom + " whispers: " + FromMsg);
					ChatLog.Close(); Delay(Random(100,200));
				}
				if(NTConfig_WhisperToManager){
					if(FromMsg.length > 45) NTManagerSend(MyTab, COLOR_2 + WhispFrom + " whispers: (Hover)" + ";" + COLOR_2 + FromMsg);
					else if(FromMsg.length < 46) NTManagerSend(MyTab, COLOR_2 + WhispFrom + " whispers: " + FromMsg);
				}
			}
			else if(msg.indexOf("You whispered to ") != -1) {
				var WhispTo1 = msg.split(": ")[0].replace(/ÿc(.)/g, "");
				var WhispTo2 = msg.split(": ")[1].replace(/ÿc(.)/g, "");
				if(LogAll){
					ChatLog = FileOpen(ChatRLog, 2);
						ChatLog.WriteLine(WhispTo1 + WhispTo2);
					ChatLog.Close(); Delay(Random(200,400));
				}
				if(NTConfig_WhisperToManager){
					if(FromMsg.length > 45) NTManagerSend(MyTab, COLOR_2 + WhispTo1 + " whispers: (Hover)" + ";" + COLOR_2 + WhispTo2);
					else if(FromMsg.length < 46) NTManagerSend(MyTab, COLOR_2 + WhispTo1 + " whispers: " + WhispTo2);
				}
			}
			else if(msg.indexOf(" has ") != -1 && LogAll) {
				var PartyIn = msg.split(" has joined")[0].replace(/ÿc(.)/g, "");
				ChatLog = FileOpen(ChatRLog, 2);
					ChatLog.WriteLine(PartyIn + " has joined your party to fight the forces of evil.");
				ChatLog.Close(); Delay(Random(100,200));
			}
			else if(msg.indexOf(" invites ") != -1 && LogAll) {
				var InvitedMe = msg.split(" invites you")[0].replace(/ÿc(.)/g, "");
				ChatLog = FileOpen(ChatRLog, 2);
					ChatLog.WriteLine(InvitedMe + " invites you to ally against the forces of evil.");
				ChatLog.Close(); Delay(Random(100,200));
			}
			else if(msg.indexOf("You are now allied with ") != -1 && LogAll) {
				var NewAlly = msg.split("allied with ")[1].replace(/ÿc(.)/g, "");
				ChatLog = FileOpen(ChatRLog, 2);
					ChatLog.WriteLine("You are now allied with " + NewAlly);
				ChatLog.Close(); Delay(Random(100,200));
			}
			break;
		case 3:
			if(msg.indexOf("<BattleNet>") != -1 && LogAll) {
				var ServMsg = msg.split(">: ")[1].replace(/ÿc(.)/g, "");
				ChatLog = FileOpen(ChatRLog, 2);
					ChatLog.WriteLine("<BattleNet> " + ServMsg);
				ChatLog.Close(); Delay(Random(100,200));
			}
			break;
		case 8:
			if(msg.indexOf(" has expressed") != -1 && LogAll) {
				var HostileR = msg.split(" has expressed hostility")[0].replace(/ÿc(.)/g, "");
				ChatLog = FileOpen(ChatRLog, 2);
					ChatLog.WriteLine(HostileR + " has expressed hostility towards you.");
				ChatLog.Close(); Delay(Random(100,200));
			}
			break;
		case 9:
			if(msg.indexOf(" has left") != -1 && LogAll) {
				var PartyOut = msg.split(" has left your")[0].replace(/ÿc(.)/g, "");
				ChatLog = FileOpen(ChatRLog, 2);
					ChatLog.WriteLine(PartyOut + " has left your party.");
				ChatLog.Close(); Delay(Random(100,200));
			}
			break;
		default:
			break;
	}
}

function ClosingChatRLogs()
{
	CloseLine = "";
	for(i = OpenLine.length ; i >= 0 ; i--) { CloseLine = CloseLine + "-"; }
	ChatLog = FileOpen(ChatRLog, 2);
	ChatLog.WriteLine(CloseLine);
	ChatLog.Close();
}

function ScanPlayers()
{
	PiGN = 1;
	var _player = GetPlayerUnit();
	if(_player){
		while(_player.GetNext()){ PiGN++; }
	}
	return PiGN;
}

function MyTime()
{
	var now    	= new Date();
	var HR   	= now.getHours();
	var MM 		= now.getMinutes();
	var SS 		= now.getSeconds();
	var DT;

	if (HR < 12) { DT = "AM"; }
	if (HR > 11) { DT = "PM"; }
	if (HR > 12) { HR = HR - 12; }
	if (HR == 0) { HR = 12; }
	if (HR < 10) { HR = "0" + HR; }
	if (MM < 10) { MM = "0" + MM; }
	if (SS < 10) { SS = "0" + SS; }

	TheTime = HR + ":" + MM + ":" + SS + " " + DT;
	return TheTime;
}

function NTManagerSend(type, logString) { return SendCopyData("D2NT Manager", null, 9<<16|type, logString); }

// ChatR Functions End