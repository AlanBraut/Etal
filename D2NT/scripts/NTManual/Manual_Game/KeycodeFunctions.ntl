// NTManualGame functions

function StackedRes()
{
	Print(COLOR_1 + "Fire: " + Resi[0] + COLOR_4 + " - " + COLOR_3 + "Cold: " + Resi[1] + COLOR_4 + " - " + COLOR_9 + "Light: " + Resi[2] + COLOR_4 + " - " + COLOR_2 + "Poison: " + Resi[3]);
}

function FCRPlusPrint()
{
	Print(COLOR_4 + "FCR(" + COLOR_1 + me.GetStat(105) + COLOR_4 + ") FHR(" + COLOR_1 + me.GetStat(99) + COLOR_4 + ") IAS(" + COLOR_1 + me.GetStat(93) + COLOR_4 + ") %DR(" + COLOR_1 + me.GetStat(36) + COLOR_4 + ") %MDR(" + COLOR_1 + me.GetStat(37) + COLOR_4 + ")");
}

function SorbPrint()
{
	Print(COLOR_4 + "Absorbs: " + COLOR_1 + "Fire " + me.GetStat(143) + COLOR_4 + "(" + COLOR_1 + me.GetStat(142) +
		  COLOR_4 + "%) " + COLOR_9 + "Light " + me.GetStat(145) + COLOR_4 + "(" + COLOR_9 + me.GetStat(144) +
		  COLOR_4 + "%) " + COLOR_0 + "Magic " + me.GetStat(147) + COLOR_4 + "(" + COLOR_0 + me.GetStat(146) +
		  COLOR_4 + "%) " + COLOR_3 + "Cold "  + me.GetStat(149) + COLOR_4 + "(" + COLOR_3 + me.GetStat(148) + COLOR_4 + "%)");
}

function MG_Credits()
{
	Print("");
	Print("");
	Print("");
}

function Do_KeyHotList()
{
	var MercOnOrNo = (!NTConfig_MercStats) ? "" : " (+Merc)";

	var HotKeys = COLOR_8 + "Manual Game HotKeys" + ";";
	HotKeys += COLOR_1 + "---------------------------------------------------" + "\n";
	HotKeys += COLOR_2 + "[" + WhatHotKey(Key_EnemyOnMap) + 	"]" + COLOR_4 + " Turn On/Off Enemies On Map" + "\n";
	HotKeys += COLOR_2 + "[" + WhatHotKey(Key_MissileOnMap) + 	"]" + COLOR_4 + " Turn On/Off Missiles On Map" + "\n";
	HotKeys += COLOR_2 + "[" + WhatHotKey(Key_AutoParty) + 	"]" + COLOR_4 + " Turn On/Off Auto-Party" + "\n";
	HotKeys += COLOR_2 + "[" + WhatHotKey(Key_DoPrecast) + 	"]" + COLOR_4 + "  Initiate a precast!" + "\n";
	HotKeys += COLOR_2 + "[" + WhatHotKey(Key_PrintRes) + 		"]" + COLOR_4 + " Print Resistances On Screen" + "\n";
	HotKeys += COLOR_2 + "[" + WhatHotKey(Key_PrintFCRPlus) + 	"]" + COLOR_4 + " Print FCR/FHR/IAS/%DR/%MDR" + "\n";
	HotKeys += COLOR_2 + "[" + WhatHotKey(Key_PrintAbsorbs) + 	"]" + COLOR_4 + " Print Your Elemental Absorbs" + "\n";
	HotKeys += COLOR_2 + "[" + WhatHotKey(Key_PrintBPs) + 		"]" + COLOR_4 + " Print Your Current Char Breakpoints" + "\n";
	HotKeys += COLOR_2 + "[" + WhatHotKey(Key_PrintChicken) + 	"]" + COLOR_4 + " Print Your HP/MP Chicken Values" + "\n";
	HotKeys += COLOR_2 + "[" + WhatHotKey(Key_PrintStats) + 	"]" + COLOR_4 + " Print Your Stats To Screen" + MercOnOrNo + "\n";
	HotKeys += COLOR_2 + "[" + WhatHotKey(Key_StashCheck) + 	"]" + COLOR_4 + " Commence Stash Space Checking" + "\n";
	HotKeys += COLOR_2 + "[" + WhatHotKey(Key_InvCheck) + 		"]" + COLOR_4 + " Commence Inventory Space Checking" + "\n";
	HotKeys += COLOR_2 + "[" + WhatHotKey(Key_GameStats) + 	"]" + COLOR_4 + " Print Current Game Stats to Manager" + "\n";
	HotKeys += COLOR_2 + "[" + WhatHotKey(Key_HotKeyInfo) + 	"]" + COLOR_4 + " Send This Info To Manager" + "\n";
	HotKeys += COLOR_2 + "[" + WhatHotKey(Key_ExitGame) + 		"]" + COLOR_4 + " Exit Current Game" + "\n";
	HotKeys += COLOR_2 + "[" + WhatHotKey(Key_KeyCodeCheck) + 	"]" + COLOR_4 + " Turn On/Off KeyCode Checking" + "\n";
	HotKeys += COLOR_2 + "[" + WhatHotKey(Key_LoadChatR) + 	"]" + COLOR_4 + " Turn On/Off Chat Recording" + "\n";
	HotKeys += COLOR_2 + "[" + WhatHotKey(Key_ItemInfos) + 	"]" + COLOR_4 + " Turn On/Off Item Info" + "\n";
	HotKeys += COLOR_2 + "[" + WhatHotKey(Key_AntiIdle) + 		"]" + COLOR_4 + " Turn On/Off AntiIdle for AFK's" + "\n";
	HotKeys += COLOR_2 + "[" + WhatHotKey(Key_GoToTown) + 		"]" + COLOR_4 + " Make/Take TP to town" + "\n";
	//HotKeys += COLOR_2 + "[" + WhatHotKey(Key_NextArea) + 		"]" + COLOR_4 + " Auto-Tele to Next Area" + "\n";
	//HotKeys += COLOR_2 + "[" + WhatHotKey(Key_LastArea) + 		"]" + COLOR_4 + " Auto-Tele to Last Area" + "\n";
	if(Key_Credits > 0) { HotKeys += COLOR_2 + "[" + WhatHotKey(Key_Credits) + "]" + COLOR_4 + " Send NTMap Credits to Manager" + "\n"; }
	HotKeys += COLOR_1 + "---------------------------------------------------";
	MG_LogToOOG(NTC_LOG_COMMON, HotKeys);
}

function HeadingHome()
{
	if(me.areaid >= 2 && me.areaid <= 39) {
		NTTM_CheckAct(1);
	}
	else if(me.areaid >= 40 && me.areaid <= 74) {
		NTTM_CheckAct(2);
	}
	else if(me.areaid >= 75 && me.areaid <= 102) {
		NTTM_CheckAct(3);
	}
	else if(me.areaid >= 103 && me.areaid <= 108) {
		NTTM_CheckAct(4);
	}
	else if(me.areaid >= 109) {
		NTTM_CheckAct(5);
	}
}

function MG_CheckFreeInventorySpace(PrintToScreen) {
	var i, x, y;
	var itemsInventory;

	if(arguments.length == 0) { PrintToScreen = false; }
	else { PrintToScreen = true; }

	var inventorySpace = new Array(4);

	for(y = 0 ; y < 4 ; y++) {
		inventorySpace[y] = new Array(10);
	}
	for(y = 0 ; y < 4 ; y++) {
		for(x = 0 ; x < 10 ; x++) {
			inventorySpace[y][x] = 0;
		}
	}

	itemsInventory = me.GetItems();

	if(!itemsInventory) {
		return false;
	}
	var totalUsedSpace = 0;
	for(i = 0 ; i < itemsInventory.length ; i++) {
		if(itemsInventory[i].mode == 0 && itemsInventory[i].itemloc == 0) {
			if(itemsInventory[i].classid == 605 && itemsInventory[i].quality == 7) { // id's where gheeds is
				for(y = 0 ; y < itemsInventory[i].ysize ; y++) {
					for(x = 0 ; x < itemsInventory[i].xsize ; x++)
						inventorySpace[y+itemsInventory[i].y][x+itemsInventory[i].x] = 5;
						totalUsedSpace++;
				}
			}
			else if(itemsInventory[i].classid == 603 && itemsInventory[i].quality == 7) { // id's where the anni is
				for(y = 0 ; y < itemsInventory[i].ysize ; y++) {
					for(x = 0 ; x < itemsInventory[i].xsize ; x++)
						inventorySpace[y+itemsInventory[i].y][x+itemsInventory[i].x] = 4;
						totalUsedSpace++;
				}
			}
			else if(itemsInventory[i].classid == 604 && itemsInventory[i].quality == 7) { // id's where the torch is
				for(y = 0 ; y < itemsInventory[i].ysize ; y++) {
					for(x = 0 ; x < itemsInventory[i].xsize ; x++)
						inventorySpace[y+itemsInventory[i].y][x+itemsInventory[i].x] = 3;
						totalUsedSpace++;
				}
			}
			else if(itemsInventory[i].classid == 549) { // id's where the cube is
				for(y = 0 ; y < itemsInventory[i].ysize ; y++) {
					for(x = 0 ; x < itemsInventory[i].xsize ; x++)
						inventorySpace[y+itemsInventory[i].y][x+itemsInventory[i].x] = 2;
						totalUsedSpace++;
				}
			}
			else { // this will be unlocked full
				for(y = 0 ; y < itemsInventory[i].ysize ; y++) {
					for(x = 0 ; x < itemsInventory[i].xsize ; x++)
						inventorySpace[y+itemsInventory[i].y][x+itemsInventory[i].x] = 1;
						totalUsedSpace++;
				}
			}
		}
	}
	var totalFreeSpace = 40 - totalUsedSpace;
		var InvMangPrint = "";
	if(PrintToScreen) {
		if(InvChecking == "Game") Print(" ");
		if(InvChecking == "Game") Print(COLOR_8 + "INVENTORY: ");
			InvMangPrint += COLOR_8 + "Space Check -" + COLOR_5 + " Inventory" + ";";
			InvMangPrint += COLOR_1 + "--------------------------------------" + "\n";
			InvMangPrint += COLOR_4 + "Spaces: Free (" + COLOR_8 + totalFreeSpace + COLOR_4 + ") Used (" + COLOR_8 + totalUsedSpace + COLOR_4 + ")" + "\n";
		for(y = 0 ; y < 4 ; y++) {
			var printSpace = [];
			for(x = 0 ; x < 10 ; x++) {
				switch(inventorySpace[y][x]) {
					case 0: // unlocked empty
						printSpace.push(COLOR_2 + "O")
						break;
					case 1: // unlocked full
						printSpace.push(COLOR_1 + "X")
						break;
					case 2: // where the cube is
						printSpace.push(COLOR_4 + "C")
						break;
					case 3: // where the torch is
						printSpace.push(COLOR_4 + "T")
						break;
					case 4: // where the anni is
						printSpace.push(COLOR_4 + "A")
						break;
					case 5: // where Gheeds is
						printSpace.push(COLOR_4 + "G")
						break;
				}
			}
			if(InvChecking == "Game") Print(COLOR_4 + "|" + printSpace + COLOR_4 + "|");
			InvMangPrint += COLOR_4 + "|" + printSpace + COLOR_4 + "|" + "\n";
		}
		if(InvChecking == "Game") Print(COLOR_8 + "Free Space = " + totalFreeSpace + ", Used Space = " + totalUsedSpace);
		InvMangPrint += COLOR_8 + "Inventory Gold: " + COLOR_4 + InvGold + "\n";
		InvMangPrint += COLOR_1 + "--------------------------------------";
		if(InvChecking == "Mgr") {
			Print(COLOR_4 + "Inventory check sent to Manager CommonLog!");
			MG_LogToOOG(NTC_LOG_COMMON, InvMangPrint);
		}
	}
	return totalFreeSpace;
}

var StashGold = addSeparatorsNF(me.GetStat(15), ",", ".", ",");
var InvGold = addSeparatorsNF(me.GetStat(14), ",", ".", ",");

function MG_CheckFreeStashSpace(PrintToScreen) {

	var i, x, y;
	var itemsStash;
	var StashHeight = (me.gametype == 0) ? 4 : 8;

	if(arguments.length == 0) { PrintToScreen = false; }
	else { PrintToScreen = true; }

	var _stashspace = new Array(StashHeight);
	for(y = 0 ; y < StashHeight ; y++) {
		_stashspace[y] = new Array(6);
	}

	for(y = 0 ; y < StashHeight ; y++) {
		for(x = 0 ; x < 6 ; x++) {
			_stashspace[y][x] = 0;
		}
	}

	itemsStash = me.GetItems();

	if(!itemsStash) {
		return false;
	}
	var totalUsedSpace = 0;
	for(i = 0 ; i < itemsStash.length ; i++) {
		if(itemsStash[i].mode == 0 && itemsStash[i].itemloc == 4) {
			if(itemsStash[i].classid == 549) { // id's where the cube is
				for(y = 0 ; y < itemsStash[i].ysize ; y++) {
					for(x = 0 ; x < itemsStash[i].xsize ; x++) {
						_stashspace[y+itemsStash[i].y][x+itemsStash[i].x] = 2;
						totalUsedSpace++
					}
				}
			} else {
				for(y = 0 ; y < itemsStash[i].ysize ; y++) {
					for(x = 0 ; x < itemsStash[i].xsize ; x++) {
						_stashspace[y+itemsStash[i].y][x+itemsStash[i].x] = 1;
						totalUsedSpace++
					}
				}
			}
		}
	}
	var totalFreeSpace = (48 - totalUsedSpace);
	var StashMangPrint = "";
	if(PrintToScreen) {
		if(StashChecking == "Game") Print(COLOR_8 + "STASH: ");
		StashMangPrint += COLOR_8 + "Space Check - " + COLOR_5 + "Stash" + ";";
		StashMangPrint += COLOR_1 + "--------------------------------------" + "\n";
		StashMangPrint += COLOR_4 + "Spaces: Free (" + COLOR_8 + totalFreeSpace + COLOR_4 + ") Used (" + COLOR_8 + totalUsedSpace + COLOR_4 + ")" + "\n";
		for(y = 0 ; y < StashHeight ; y++) {
			var printSpace = [];
			for(x = 0 ; x < 6 ; x++) {
				switch(_stashspace[y][x]) {
					case 0:
						printSpace.push(COLOR_2 + "O")
						break;
					case 1:
						printSpace.push(COLOR_1 + "X")
						break;
					case 2:
						printSpace.push(COLOR_4 + "C")
						break;
				}
			}
			if(StashChecking == "Game") Print(COLOR_4 + "|" + printSpace + COLOR_4 + "|");
			StashMangPrint += COLOR_4 + "|" + printSpace + COLOR_4 + "|" + "\n";
		}
		if(StashChecking == "Game") Print(COLOR_8 + "Free Space = " + totalFreeSpace + ", Used Space = " + totalUsedSpace);
		StashMangPrint += COLOR_8 + "Stash Gold: " + COLOR_4 + StashGold + "\n";
		StashMangPrint += COLOR_1 + "--------------------------------------";
		if(StashChecking == "Mgr") {
			Print(COLOR_4 + "Stash check sent to Manager CommonLog!");
			MG_LogToOOG(NTC_LOG_COMMON, StashMangPrint);
		}
	}
	return totalFreeSpace;
}

var AntiIdleAct = ["the Rogue Encampment", "Lut Gohlein", "the Kurast Docks", "the Pandemonium Fortress", "Harrogath"];
var AntiIdleActPreMsg = ["I feel like going to ", "I'm gonna WayPoint to ", "How about I go to ", "I'll just mosy on over to ", "Hey, let's head to "];
var AntiIdleAct1 = ["kashya", "gheed", "charsi", "akara", "warriv"];
var AntiIdleAct2 = ["lysander", "cain", "fara", "drognan", "atma"];
var AntiIdleAct3 = ["hratli", "cain", "alkor", "ormus", "meshif"];
var AntiIdleAct4 = ["stash", "cain", "halbu", "tyrael", "jamella"];
var AntiIdleAct5 = ["stash", "cain", "malah", "larzuk", "qual-kehk"];
var AntiIdlePreMsg = ["!I'm gonna go see ", "!I wonder what's up with ", "!Lets go see ", "!I didn't see you over there ", "!Well if it isn't "];

function MG_AntiIdle()
{
	while (me.areaid != 0 && MGAntiIdle){
		NTC_PingDelay(3000);
		t = Random(0,4);
		abcde = Random(0,4);
		var WeGonnaChangeAct;

		if(WeGonnaChangeAct == undefined){
			WeGonnaChangeAct = 0;
		} else if(WeGonnaChangeAct == 5){
			qrstu = Random(1,5);
			vwxyz = Random(0,4);
			Say(AntiIdleActPreMsg[vwxyz] + AntiIdleAct[qrstu-1]);
			if(!NTTM_CheckAct(qrstu)){
				Say("I guess I'm not going to " + AntiIdleAct[qrstu-1]);
				NTC_SendMsgToScript("NTBotGame.ntj", "NTTM_CheckAct()");
				return;
			}
		} else{
			WeGonnaChangeAct++;
		}

		switch(me.areaid){
			case 1:
				Say(AntiIdlePreMsg[abcde] + AntiIdleAct1[t] + "!");
				if(!NTTM_TownMove(AntiIdleAct1[t])) {
					NTC_SendMsgToScript("NTBotGame.ntj", "NTTM_TownMove()");
					return;
				}
				break;
			case 40:
				Say(AntiIdlePreMsg[abcde] + AntiIdleAct2[t] + "!");
				if(!NTTM_TownMove(AntiIdleAct2[t])) {
					NTC_SendMsgToScript("NTBotGame.ntj", "NTTM_TownMove()");
					return;
				}
				break;
			case 75:
				Say(AntiIdlePreMsg[abcde] + AntiIdleAct3[t] + "!");
				if(!NTTM_TownMove(AntiIdleAct3[t])) {
					NTC_SendMsgToScript("NTBotGame.ntj", "NTTM_TownMove()");
					return;
				}
				break;
			case 103:
				Say(AntiIdlePreMsg[abcde] + AntiIdleAct4[t] + "!");
				if(!NTTM_TownMove(AntiIdleAct4[t])) {
					NTC_SendMsgToScript("NTBotGame.ntj", "NTTM_TownMove()");
					return;
				}
				break;
			case 109:
				Say(AntiIdlePreMsg[abcde] + AntiIdleAct5[t] + "!");
				if(!NTTM_TownMove(AntiIdleAct5[t])) {
					NTC_SendMsgToScript("NTBotGame.ntj", "NTTM_TownMove()");
					return;
				}
			break;
		}
		Delay(Random(2000,5000));
	}
}

function WhatHotKey(ThisKey)
{
	switch(ThisKey) {
		case 8: ThisKey = "Backspace"; break;
		case 9: ThisKey = "Tab"; break;
		case 13: ThisKey = "Enter"; break;
		case 16: ThisKey = "Shift"; break;
		case 17: ThisKey = "Ctrl"; break;
		case 18: ThisKey = "Alt"; break;
		case 19: ThisKey = "Pause"; break;
		case 20: ThisKey = "Caps Lock"; break;
		case 27: ThisKey = "Esc"; break;
		case 33: ThisKey = "Pg Up"; break;
		case 34: ThisKey = "Pg Dn"; break;
		case 35: ThisKey = "End"; break;
		case 36: ThisKey = "Home"; break;
		case 45: ThisKey = "Ins"; break;
		case 46: ThisKey = "Del"; break;
		case 48: ThisKey = "0"; break;
		case 49: ThisKey = "1"; break;
		case 50: ThisKey = "2"; break;
		case 51: ThisKey = "3"; break;
		case 52: ThisKey = "4"; break;
		case 53: ThisKey = "5"; break;
		case 54: ThisKey = "6"; break;
		case 55: ThisKey = "7"; break;
		case 56: ThisKey = "8"; break;
		case 57: ThisKey = "9"; break;
		case 65: ThisKey = "A"; break;
		case 66: ThisKey = "B"; break;
		case 67: ThisKey = "C"; break;
		case 68: ThisKey = "D"; break;
		case 69: ThisKey = "E"; break;
		case 70: ThisKey = "F"; break;
		case 71: ThisKey = "G"; break;
		case 72: ThisKey = "H"; break;
		case 73: ThisKey = "I"; break;
		case 74: ThisKey = "J"; break;
		case 75: ThisKey = "K"; break;
		case 76: ThisKey = "L"; break;
		case 77: ThisKey = "M"; break;
		case 78: ThisKey = "N"; break;
		case 79: ThisKey = "O"; break;
		case 80: ThisKey = "P"; break;
		case 81: ThisKey = "Q"; break;
		case 82: ThisKey = "R"; break;
		case 83: ThisKey = "S"; break;
		case 84: ThisKey = "T"; break;
		case 85: ThisKey = "U"; break;
		case 86: ThisKey = "V"; break;
		case 87: ThisKey = "W"; break;
		case 88: ThisKey = "X"; break;
		case 89: ThisKey = "Y"; break;
		case 90: ThisKey = "Z"; break;
		case 96: ThisKey = "Num 0"; break;
		case 97: ThisKey = "Num 1"; break;
		case 98: ThisKey = "Num 2"; break;
		case 99: ThisKey = "Num 3"; break;
		case 100: ThisKey = "Num 4"; break;
		case 101: ThisKey = "Num 5"; break;
		case 102: ThisKey = "Num 6"; break;
		case 103: ThisKey = "Num 7"; break;
		case 104: ThisKey = "Num 8"; break;
		case 105: ThisKey = "Num 9"; break;
		case 106: ThisKey = "Num *"; break;
		case 107: ThisKey = "Num +"; break;
		case 109: ThisKey = "Num -"; break;
		case 110: ThisKey = "Num ."; break;
		case 111: ThisKey = "Num /"; break;
		case 112: ThisKey = "F1"; break;
		case 113: ThisKey = "F2"; break;
		case 114: ThisKey = "F3"; break;
		case 115: ThisKey = "F4"; break;
		case 116: ThisKey = "F5"; break;
		case 117: ThisKey = "F6"; break;
		case 118: ThisKey = "F7"; break;
		case 119: ThisKey = "F8"; break;
		case 120: ThisKey = "F9"; break;
		case 121: ThisKey = "F10"; break;
		case 122: ThisKey = "F11"; break;
		case 123: ThisKey = "F12"; break;
		case 144: ThisKey = "Num Lock"; break;
		case 145: ThisKey = "Scroll Lock"; break;
		case 186: ThisKey = "Semi-Colon"; break;
		case 187: ThisKey = "="; break;
		case 188: ThisKey = "Comma"; break;
		case 189: ThisKey = "-"; break;
		case 190: ThisKey = "Period"; break;
		case 191: ThisKey = "/"; break;
		case 192: ThisKey = "~"; break;
		case 219: ThisKey = "["; break;
		case 220: ThisKey = "BackSlash"; break;
		case 221: ThisKey = "]"; break;
		case 222: ThisKey = "'"; break;
		default: break;
	} return ThisKey;
}
